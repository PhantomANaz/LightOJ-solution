//Basic Segment Tree

#include <bits/stdc++.h>
using namespace std;
 
int a[100005];
int tree[400005];
void build(int node, int start, int en)
{
    if(start == en)
    {
        // Leaf node will have a single element
        tree[node] = a[start];
    }
    else
    {
        int mid = (start + en) / 2;
        // Recurse on the left child
        build(2*node, start, mid);
        // Recurse on the right child
        build(2*node+1, mid+1, en);
        // Internal node will have the sum of both of its children
        ///tree[node] = tree[2*node] + tree[2*node+1];
        //Internal node will have the minimum value of both of its children
        tree[node] = min(tree[2*node], tree[2*node+1]);
        //if it was int build then next two line is valid
        ///int x = build(2*node, start, mid);
        ///int y = build(2*node+1, mid+1, en);
 
        ///tree[node] = min(x,y);
    }
}
/**void update(int node, int start, int en, int idx, int val)
{
    if(start == en)
    {
        // Leaf node
        A[idx] += val;
        tree[node] += val;
    }
    else
    {
        int mid = (start + en) / 2;
        if(start <= idx and idx <= mid)
        {
            // If idx is in the left child, recurse on the left child
            update(2*node, start, mid, idx, val);
        }
        else
        {
            // if idx is in the right child, recurse on the right child
            update(2*node+1, mid+1, en, idx, val);
        }
        // Internal node will have the sum of both of its children
        tree[node] = tree[2*node] + tree[2*node+1];
    }
}
**/
int query(int node, int start, int en, int l, int r)
{
    if(r < start or en < l)
    {
        //cout<<"Prob"<<endl;
        // range represented by a node is completely outside the given range
        return INT_MAX;
    }
    if(l <= start and en <= r)
    {
        // range represented by a node is completely inside the given range
        return tree[node];
    }
    // range represented by a node is partially inside and partially outside the given range
    int mid = (start + en) / 2;
    int p1 = query(2*node, start, mid, l, r);
    int p2 = query(2*node+1, mid+1, en, l, r);
    //For min problem
    return min(p1, p2);
    //For sum problem
    ///return (p1 + p2);
}
int main()
{
    int t,m,n,ans,no,q;
    scanf("%d",&t);
 
    for(int i = 1; i<=t; i++)
    {
        scanf("%d%d",&no,&q);
 
        for(int j = 1; j<=no; j++)scanf("%d",&a[j]);
        build(1, 1, no);
 
        printf("Case %d:\n",i);
        while(q--)
        {
            scanf("%d%d",&m,&n);
            ans = query(1,1,no,m,n);
            printf("%d\n",ans);
        }
    }
 
    return 0;
}
